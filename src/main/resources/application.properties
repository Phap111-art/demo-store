# port server
server.port=8080
# config db
spring.datasource.url=jdbc:postgresql://localhost:5432/my-db
spring.datasource.username=postgres
spring.datasource.password=123456
spring.datasource.driver-class-name=org.postgresql.Driver
spring.jpa.hibernate.ddl-auto=update
spring.jpa.show-sql=true
spring.jpa.properties.hibernate.format_sql=true
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.PostgreSQLDialect

# access url


#info cloudinary
cloudinary.cloud_name=dks1oreg8
cloudinary.api_key=537757986968683
cloudinary.api_secret=QthBxnqcdMYt6m2gIEh0rWww1Qk
cloudinary.folder_avatar= image-product

# Key server
secret.key = store

#info mail
spring.mail.host=smtp.gmail.com
spring.mail.port=587
spring.mail.username=macdinhphap456@gmail.com
spring.mail.password=pmygprjcxjqqrhhl
spring.mail.properties.mail.smtp.auth=true
spring.mail.properties.mail.smtp.starttls.enable=true

#login with google
spring.security.oauth2.client.registration.google.client-id=4459952968-2epjdvrpb0f8gs4bg0l1nibnlre2lq6o.apps.googleusercontent.com
spring.security.oauth2.client.registration.google.client-secret=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

# key

spring.security.oauth2.resourceserver.jwt.issuer-uri=http://localhost:8081/realms/spring-boot-microservices-realm
#spring.security.oauth2.client.registration.keycloak.client-id=login-app
#spring.security.oauth2.client.registration.keycloak.authorization-grant-type=authorization_code
#spring.security.oauth2.client.registration.keycloak.scope=openid
#spring.security.oauth2.resourceserver.jwt.issuer-uri=http://localhost:8081/realms/store-oauth2-realm


